#!/bin/bash

# Copyright 2018 Christian Gregg
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# A helper script to generate skalpel visualisation files and open the
# visualisation webapp
#
# Note: This file combines all of the files generated by skalpel into
# a single JSON file containing a top-level key "data" which value
# is the array of the combined files.
#
# It's a bit hacky, but it works. Still requires the user to select
# the file within the browser.
# No real way to get around this w/o the overhead of a webserver,
# could pass a base64 encoded version of the data through the URL passed
# to the `${OPEN}` command in the form of a location hash string
# (https://www.w3schools.com/jsref/prop_loc_hash.asp)
#
# Problematic though, info might be too long to pass into URL, there are size
# restrictions, these restriction are browser specific IIRC.
#
# Best long-term solution is a webserver to interface b/w Skalpel and Dissect.

set -eu

# Require 1 args (source file)
if [[ ! ${#} -eq 1 ]] ; then
	echo "Usage: ./dissect <source_file>"
	exit 1
fi

# Check file exists
if [ ! -f ${1} ] ; then
	echo "File Not Found [${1}]"
	exit 1
fi

# macOS or Linux?
UNAME_S=$(uname -s)
if [[ "${UNAME_S}" = "Linux" ]]; then
	OPEN="firefox -new-tab"
elif [[ "${UNAME_S}" = "Darwin" ]]; then
	OPEN="open"
fi

# skalpel command to run analysis
SKALPEL_CMD="skalpel -z ${1} -b 1 ${1}"

# Run skalpel
${SKALPEL_CMD}

rm -f ${1}.viz.json
echo "{ \"data\": [" > ${1}.viz.json

# Combine output files!
for FILE in ${1}-*.viz.json; do
	cat ${FILE} >> ${1}.viz.json.tmp
	echo "," >> ${1}.viz.json.tmp
done

# Remove the last `,`
sed '$d' ${1}.viz.json.tmp >> ${1}.viz.json

# Close of JSON array and top-level object!
echo "]}" >> ${1}.viz.json

# Remove temporary file in favour of the combined file...
rm ${1}.viz.json.tmp ${1}-*.viz.json

# open up dissect
${OPEN} http://localhost:1337/

# Start python server
python3 -m http.server 1337

echo "Bye!"
